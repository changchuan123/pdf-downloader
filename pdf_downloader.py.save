import os
import requests
from urllib.parse import urlparse, unquote
import time
from pathlib import Path
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

class PDFDownloader:
    def __init__(self, download_folder="downloads", max_workers=5):
        """
        初始化PDF下载器
        
        Args:
            download_folder (str): 下载文件保存的文件夹路径
            max_workers (int): 最大并发下载数
        """
        self.download_folder = Path(download_folder)
        self.max_workers = max_workers
        self.session = requests.Session()
        
        # 设置请求头，模拟浏览器访问
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # 创建下载文件夹
        self.download_folder.mkdir(parents=True, exist_ok=True)
        
        # 统计信息
        self.success_count = 0
        self.failed_count = 0
        self.failed_urls = []
        
    def get_filename_from_url(self, url):
        """从URL中提取文件名"""
        parsed_url = urlparse(url)
        filename = os.path.basename(unquote(parsed_url.path))
        
        # 如果URL中没有文件名或不是PDF，生成一个
        if not filename or not filename.lower().endswith('.pdf'):
            filename = f"document_{hash(url) % 100000}.pdf"
            
        return filename
    
    def download_single_pdf(self, url, custom_filename=None):
        """
        下载单个PDF文件
        
        Args:
            url (str): PDF文件的下载链接
            custom_filename (str): 自定义文件名（可选）
        
        Returns:
            tuple: (成功标志, 文件路径或错误信息)
        """
        try:
            # 确定文件名
            if custom_filename:
                filename = custom_filename
                if not filename.lower().endswith('.pdf'):
                    filename += '.pdf'
            else:
                filename = self.get_filename_from_url(url)
            
            file_path = self.download_folder / filename
            
            # 如果文件已存在，添加序号
            counter = 1
            original_path = file_path
            while file_path.exists():
                stem = original_path.stem
                suffix = original_path.suffix
                file_path = self.download_folder / f"{stem}_{counter}{suffix}"
                counter += 1
            
            print(f"正在下载: {url}")
            print(f"保存为: {file_path}")
            
            # 发送请求下载文件
            response = self.session.get(url, stream=True, timeout=30)
            response.raise_for_status()
            
            # 检查Content-Type是否为PDF
            content_type = response.headers.get('content-type', '').lower()
            if 'application/pdf' not in content_type and 'pdf' not in content_type:
                print(f"警告: {url} 可能不是PDF文件 (Content-Type: {content_type})")
            
            # 保存文件
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            file_size = file_path.stat().st_size
            print(f"下载完成: {file_path} ({file_size} bytes)")
            
            return True, str(file_path)
            
        except requests.exceptions.RequestException as e:
            error_msg = f"下载失败 {url}: 网络错误 - {str(e)}"
            print(error_msg)
            return False, error_msg
            
        except Exception as e:
            error_msg = f"下载失败 {url}: {str(e)}"
            print(error_msg)
            return False, error_msg
    
    def download_from_list(self, url_list, filename_list=None):
        """
        从URL列表批量下载PDF
        
        Args:
            url_list (list): PDF下载链接列表
            filename_list (list): 对应的文件名列表（可选）
        """
        print(f"开始批量下载 {len(url_list)} 个PDF文件...")
        print(f"保存目录: {self.download_folder.absolute()}")
        print(f"并发数: {self.max_workers}")
        print("-" * 50)
        
        # 准备下载任务
        tasks = []
        for i, url in enumerate(url_list):
            custom_name = filename_list[i] if filename_list and i < len(filename_list) else None
            tasks.append((url, custom_name))
        
        # 使用线程池并发下载
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # 提交所有任务
            future_to_task = {
                executor.submit(self.download_single_pdf, url, filename): (url, filename)
                for url, filename in tasks
            }
            
            # 处理完成的任务
            for future in as_completed(future_to_task):
                url, filename = future_to_task[future]
                try:
                    success, result = future.result()
                    if success:
                        self.success_count += 1
                    else:
                        self.failed_count += 1
                        self.failed_urls.append(url)
                except Exception as e:
                    self.failed_count += 1
                    self.failed_urls.append(url)
                    print(f"任务执行异常 {url}: {str(e)}")
        
        self.print_summary()
    
    def download_from_file(self, urls_file_path, encoding='utf-8'):
        """
        从文件中读取URL列表并下载
        
        Args:
            urls_file_path (str): 包含URL列表的文件路径
            encoding (str): 文件编码
        """
        try:
            with open(urls_file_path, 'r', encoding=encoding) as f:
                urls = [line.strip() for line in f if line.strip()]
            
            print(f"从文件 {urls_file_path} 读取到 {len(urls)} 个URL")
            self.download_from_list(urls)
            
        except Exception as e:
            print(f"读取URL文件失败: {str(e)}")
    
    def print_summary(self):
        """打印下载统计信息"""
        print("\n" + "=" * 50)
        print("下载完成统计:")
        print(f"成功: {self.success_count}")
        print(f"失败: {self.failed_count}")
        print(f"总计: {self.success_count + self.failed_count}")
        
        if self.failed_urls:
            print("\n失败的URL:")
            for url in self.failed_urls:
                print(f"  - {url}")


# 使用示例
if __name__ == "__main__":
    # 方式1: 直接使用URL列表
    pdf_urls = [
        "https://example.com/document1.pdf",
        "https://example.com/document2.pdf",
        "https://example.com/document3.pdf"
    ]
    
    # 可选：指定对应的文件名
    custom_names = [
        "文档1.pdf",
        "文档2.pdf", 
        "文档3.pdf"
    ]
    
    # 创建下载器实例
    downloader = PDFDownloader(
        download_folder="./pdf_downloads",  # 下载文件夹
        max_workers=3  # 并发下载数
    )
    
    # 开始下载
    # downloader.download_from_list(pdf_urls, custom_names)
    
    # 方式2: 从文件读取URL列表
    # 创建一个包含URL的文本文件，每行一个URL
    # downloader.download_from_file("urls.txt")
    
    print("请修改pdf_urls列表，添加你的PDF下载链接，然后运行脚本。")

